// app/map/page.tsx
"use client";

import { useMemo, useState, useEffect } from "react";
import dynamic from "next/dynamic";
import { LayersControl } from "react-leaflet";
import {
  Search, Filter, BarChart3, MapPin, Users, Building2,
  TrendingUp, Eye, EyeOff, Calendar, DollarSign, MapIcon,
  Activity, Shield, Car
} from "lucide-react";

// Impo                    popupContent={(props) => `
                      <div class="space-y-2">
                        <h3 class="font-semibold text-green-800">Viviendas</h3>
                        <div><strong>Distrito:</strong> ${props.nombdist || 'N/A'}</div>
                        <div><strong>Sector:</strong> ${props.nom_sect || 'N/A'}</div>
                        <div><strong>Total Viviendas:</strong> ${props.sum_tot_vi || 'N/A'}</div>
                        <div><strong>Tipo Proyecto:</strong> ${props.tip_proyec || 'N/A'}</div>
                        <div><strong>Oferta Viv:</strong> ${props.ofert_viv_ || 'N/A'}</div>
                        <div><strong>Fuente:</strong> ${props.fuente_of_ || 'N/A'}</div>
                        <div><strong>Fecha:</strong> ${props.fecha_of_v || 'N/A'}</div>
                        <div><strong>Ubigeo:</strong> ${props.ubigeo || 'N/A'}</div>
                      </div>
                    `} (ssr off) de nuestros componentes de mapa
const Map = dynamic(() => import("../../components/map/Map"), { ssr: false });
const GeoLayer = dynamic(() => import("../../components/map/GeoLayer"), { ssr: false });
const PointsLayer = dynamic(() => import("../../components/map/PointsLayer"), { ssr: false });
const PolygonLayer = dynamic(() => import("../../components/map/PolygonLayer"), { ssr: false });

// Tipos
type ActiveLayer = "urbania" | "districts" | "urbanAreas";

export default function ClientMapPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false); // móvil

  const [searchTerm, setSearchTerm] = useState("");
  const [selectedDistrict, setSelectedDistrict] = useState("Todos");
  const [priceRange, setPriceRange] = useState({ min: null as number | null, max: null as number | null });

  // Estado para datos reales
  const [dashboardStats, setDashboardStats] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [districtsList, setDistrictsList] = useState<Array<{name: string, count: number}>>([]);
  const [filteredCount, setFilteredCount] = useState<number | null>(null);
  const [filterOptions, setFilterOptions] = useState<any>(null);
  
  // Filtros de segmentación
  const [selectedSource, setSelectedSource] = useState("Todos");
  const [selectedOperationType, setSelectedOperationType] = useState("Todos");
  const [selectedPropertyType, setSelectedPropertyType] = useState("Todos");
  const [colorBy, setColorBy] = useState<'fuente' | 'tipo_operacion' | 'tipo_propiedad'>('fuente');

  // Fetch datos reales del dashboard
  useEffect(() => {
    const fetchDashboardStats = async () => {
      try {
        const response = await fetch('/api/dashboard/stats');
        if (response.ok) {
          const data = await response.json();
          setDashboardStats(data.metrics);
        }
      } catch (error) {
        console.error('Error al obtener estadísticas del dashboard:', error);
      } finally {
        setLoading(false);
      }
    };

    const fetchDistricts = async () => {
      try {
        const response = await fetch('/api/districts');
        if (response.ok) {
          const data = await response.json();
          setDistrictsList(data.districts);
        }
      } catch (error) {
        console.error('Error al obtener distritos:', error);
      }
    };

    const fetchFilters = async () => {
      try {
        const response = await fetch('/api/filters');
        if (response.ok) {
          const data = await response.json();
          setFilterOptions(data);
        }
      } catch (error) {
        console.error('Error al obtener filtros:', error);
      }
    };

    fetchDashboardStats();
    fetchDistricts();
    fetchFilters();
    // Actualizar cada 5 minutos
    const interval = setInterval(fetchDashboardStats, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  // Estadísticas con datos reales
  const mapStats = dashboardStats ? {
    totalProperties: dashboardStats.totalProperties,
    avgPrice: dashboardStats.averagePrice,
    activeLeads: dashboardStats.activeLeads,
    closedDeals: 12, // Este se mantiene simulado
    avgROI: dashboardStats.roiPercentage
  } : {
    totalProperties: 0,
    avgPrice: 0,
    activeLeads: 0,
    closedDeals: 0,
    avgROI: 0
  };

  const districts = [
    "Todos", "Miraflores", "San Isidro", "Barranco", "Surco", "La Molina",
    "San Borja", "Jesús María", "Magdalena", "Pueblo Libre"
  ];

  // Construye query de puntos (Urbania) según filtros
  const propertyFilters = useMemo(() => {
    let url = "/api/map/urbania?limit=1000"; // Reducir a 1000 para mejor performance
    const params = new URLSearchParams();
    
    if (searchTerm && searchTerm.trim()) {
      params.append("q", searchTerm.trim());
    }
    
    if (selectedDistrict && selectedDistrict !== "Todos") {
      params.append("district", selectedDistrict);
    }
    
    if (priceRange.min && priceRange.min > 0) {
      params.append("min_price", String(priceRange.min));
    }
    
    if (priceRange.max && priceRange.max > 0) {
      params.append("max_price", String(priceRange.max));
    }
    
    // Nuevos filtros de segmentación
    if (selectedSource && selectedSource !== "Todos") {
      params.append("source", selectedSource);
    }
    
    if (selectedOperationType && selectedOperationType !== "Todos") {
      params.append("operation_type", selectedOperationType);
    }
    
    if (selectedPropertyType && selectedPropertyType !== "Todos") {
      params.append("property_type", selectedPropertyType);
    }
    
    const qs = params.toString();
    return qs ? `${url}&${qs}` : url;
  }, [searchTerm, selectedDistrict, priceRange, selectedSource, selectedOperationType, selectedPropertyType]);

  // Obtener conteo de propiedades filtradas
  useEffect(() => {
    const fetchFilteredCount = async () => {
      try {
        // Crear URL similar pero solo para contar
        const countUrl = propertyFilters.replace('limit=2000', 'count=true');
        const response = await fetch(countUrl);
        if (response.ok) {
          const data = await response.json();
          setFilteredCount(data.features?.length || 0);
        }
      } catch (error) {
        console.error('Error al obtener conteo filtrado:', error);
      }
    };

    // Debounce el fetch para evitar demasiadas llamadas
    const timeoutId = setTimeout(fetchFilteredCount, 300);
    return () => clearTimeout(timeoutId);
  }, [propertyFilters]);

  return (
    <div className="h-screen bg-gray-50 flex relative overflow-hidden">
      {/* Sidebar desktop */}
      <aside className="hidden md:flex md:w-96 md:flex-col bg-white border-r border-gray-200 shadow-lg overflow-y-auto">
        <SidebarContent
          searchTerm={searchTerm}
          setSearchTerm={setSearchTerm}
          selectedDistrict={selectedDistrict}
          setSelectedDistrict={setSelectedDistrict}
          priceRange={priceRange}
          setPriceRange={setPriceRange}
          mapStats={mapStats}
          loading={loading}
          districtsList={districtsList}
          filterOptions={filterOptions}
          selectedSource={selectedSource}
          setSelectedSource={setSelectedSource}
          selectedOperationType={selectedOperationType}
          setSelectedOperationType={setSelectedOperationType}
          selectedPropertyType={selectedPropertyType}
          setSelectedPropertyType={setSelectedPropertyType}
          colorBy={colorBy}
          setColorBy={setColorBy}
        />
      </aside>

      {/* Contenido principal */}
      <div className="flex-1 relative">
        {/* Botón abrir sidebar en móvil */}
        <button
          onClick={() => setSidebarOpen(true)}
          className="md:hidden absolute top-4 left-4 z-50 bg-white p-3 rounded-xl shadow-lg border border-gray-200 hover:shadow-xl transition-all"
          aria-label="Abrir filtros"
        >
          <Eye className="w-5 h-5 text-gray-600" />
        </button>

        {/* Backdrop + Sidebar móvil */}
        {sidebarOpen && (
          <>
            <div
              className="fixed inset-0 bg-black/30 backdrop-blur-[2px] z-40 md:hidden"
              onClick={() => setSidebarOpen(false)}
            />
            <div className="fixed inset-y-0 left-0 w-80 bg-white border-r border-gray-200 shadow-2xl z-50 md:hidden">
              <div className="flex items-center justify-between p-4 border-b">
                <div className="flex items-center space-x-2">
                  <div className="w-9 h-9 bg-gradient-to-r from-orange-400 to-orange-500 rounded-lg flex items-center justify-center">
                    <MapPin className="w-5 h-5 text-white" />
                  </div>
                  <div>
                    <h1 className="text-sm font-bold text-gray-900">SmartCore BI</h1>
                    <p className="text-[11px] text-gray-600 -mt-0.5">Mapa Inteligente</p>
                  </div>
                </div>
                <button
                  onClick={() => setSidebarOpen(false)}
                  className="p-2 hover:bg-gray-50 rounded-lg"
                  aria-label="Cerrar filtros"
                >
                  <EyeOff className="w-5 h-5 text-gray-600" />
                </button>
              </div>

              <div className="h-[calc(100vh-64px)] overflow-auto">
                <SidebarContent
                  searchTerm={searchTerm}
                  setSearchTerm={setSearchTerm}
                  selectedDistrict={selectedDistrict}
                  setSelectedDistrict={setSelectedDistrict}
                  priceRange={priceRange}
                  setPriceRange={setPriceRange}
                  mapStats={mapStats}
                  loading={loading}
                  districtsList={districtsList}
                  filterOptions={filterOptions}
                  selectedSource={selectedSource}
                  setSelectedSource={setSelectedSource}
                  selectedOperationType={selectedOperationType}
                  setSelectedOperationType={setSelectedOperationType}
                  selectedPropertyType={selectedPropertyType}
                  setSelectedPropertyType={setSelectedPropertyType}
                  colorBy={colorBy}
                  setColorBy={setColorBy}
                />
              </div>
            </div>
          </>
        )}

        {/* Mapa: ocupa todo */}
        <div className="h-full w-full p-3">
          {/* Indicador de filtros activos */}
          {(searchTerm || selectedDistrict !== 'Todos' || priceRange.min || priceRange.max || selectedSource !== 'Todos' || selectedOperationType !== 'Todos' || selectedPropertyType !== 'Todos') && (
            <div className="absolute top-6 left-6 z-[1000] bg-white/95 backdrop-blur-sm border border-gray-200 rounded-lg px-4 py-2 shadow-lg max-w-sm">
              <div className="text-sm font-medium text-gray-800 flex items-center space-x-2">
                <Filter className="w-4 h-4 text-orange-600" />
                <span>Filtros aplicados</span>
                {filteredCount !== null && (
                  <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-semibold">
                    {filteredCount.toLocaleString()}
                  </span>
                )}
              </div>
              <div className="text-xs text-gray-600 mt-1">
                <div className="flex items-center space-x-1 mb-1">
                  <span>Coloreado por:</span>
                  <span className="font-medium">{colorBy.replace('_', ' ')}</span>
                </div>
                {searchTerm && <span>"{searchTerm}" • </span>}
                {selectedDistrict !== 'Todos' && <span>{selectedDistrict} • </span>}
                {selectedSource !== 'Todos' && <span>{selectedSource} • </span>}
                {selectedOperationType !== 'Todos' && <span>{selectedOperationType} • </span>}
                {selectedPropertyType !== 'Todos' && <span>{selectedPropertyType} • </span>}
                {(priceRange.min || priceRange.max) && (
                  <span>
                    S/ {priceRange.min ? priceRange.min.toLocaleString() : 'Min'} - {priceRange.max ? priceRange.max.toLocaleString() : 'Max'}
                  </span>
                )}
              </div>
            </div>
          )}
          
          <div className="h-full">
            <Map center={[-12.05, -77.05]} zoom={10} className="h-full">
              <LayersControl position="topright">
                
                {/* Capa principal: Propiedades - Siempre visible y activa por defecto */}
                <LayersControl.Overlay name="� Propiedades" checked>
                  <PointsLayer
                    url={propertyFilters}
                    colorBy={colorBy}
                    popupFields={[
                      { key: "titulo", label: "Título" },
                      { key: "precio", label: "Precio" },
                      { key: "moneda", label: "Moneda" },
                      { key: "distrito", label: "Distrito" },
                      { key: "tipo_operacion", label: "Operación" },
                      { key: "tipo_propiedad", label: "Tipo" },
                      { key: "fuente", label: "Fuente" },
                      { key: "area_total_m2", label: "Área total (m²)" },
                      { key: "habitaciones", label: "Dormitorios" },
                      { key: "banos", label: "Baños" },
                      { key: "cocheras", label: "Cocheras" },
                      { key: "url_original", label: "URL" },
                    ]}
                  />
                </LayersControl.Overlay>

                {/* Capa: Área Urbana */}
                <LayersControl.Overlay name="🏙️ Área Urbana">
                  <PolygonLayer
                    url="/api/map/layer/area-urbana"
                    style={{
                      color: '#f59e0b',
                      weight: 1,
                      fillOpacity: 0.08,
                      dashArray: "5, 5",
                    }}
                    popupContent={(properties) => `
                      <div>
                        <h4><strong>Área Urbana</strong></h4>
                        <div><strong>Código AU:</strong> ${properties.cod_au || 'N/A'}</div>
                        <div><strong>Nombre AU:</strong> ${properties.nom_au || 'N/A'}</div>
                        <div><strong>Distrito:</strong> ${properties.nombdist || 'N/A'}</div>
                        <div><strong>Área (ha):</strong> ${properties.area_has || 'N/A'}</div>
                      </div>
                    `}
                  />
                </LayersControl.Overlay>

                {/* Capa: Viviendas */}
                <LayersControl.Overlay name="🏡 Viviendas">
                  <PolygonLayer
                    url="/api/map/layer/viviendas"
                    style={{
                      color: "#10b981",
                      weight: 2,
                      fillOpacity: 0.25,
                      fillColor: "#10b981",
                    }}
                    popupContent={(props) => `
                      <div class="space-y-2">
                        <h3 class="font-semibold text-green-800">Viviendas</h3>
                        <div><strong>Distrito:</strong> ${props.nombdist || 'N/A'}</div>
                        <div><strong>Sector:</strong> ${props.nom_sect || 'N/A'}</div>
                        <div><strong>Total Viviendas:</strong> ${props.sum_tot_vi || 'N/A'}</div>
                        <div><strong>Tipo Proyecto:</strong> ${props.tip_proyec || 'N/A'}</div>
                        <div><strong>Oferta Viv:</strong> ${props.ofert_viv_ || 'N/A'}</div>
                        <div><strong>Fuente:</strong> ${props.fuente_of_ || 'N/A'}</div>
                        <div><strong>Fecha:</strong> ${props.fecha_of_v || 'N/A'}</div>
                        <div><strong>Ubigeo:</strong> ${props.ubigeo || 'N/A'}</div>
                      </div>
                    `}
                  />
                </LayersControl.Overlay>

                {/* Capa: Oferta de Vivienda */}
                <LayersControl.Overlay name="🏠 Oferta de Vivienda">
                  <PolygonLayer
                    url="/api/map/layer/oferta-vivienda"
                    style={{
                      color: "#3b82f6",
                      weight: 2,
                      fillOpacity: 0.3,
                      fillColor: "#3b82f6",
                    }}
                    popupContent={(props) => `
                      <div class="space-y-2">
                        <h3 class="font-semibold text-blue-800">Oferta de Vivienda</h3>
                        <div><strong>Distrito:</strong> ${props.nombdist || 'N/A'}</div>
                        <div><strong>Sector:</strong> ${props.nom_sect || 'N/A'}</div>
                        <div><strong>Total Viviendas:</strong> ${props.sum_tot_vi || 'N/A'}</div>
                        <div><strong>Tipo Proyecto:</strong> ${props.tip_proyec || 'N/A'}</div>
                        <div><strong>Oferta Viv:</strong> ${props.ofert_viv_ || 'N/A'}</div>
                        <div><strong>Fuente:</strong> ${props.fuente_of_ || 'N/A'}</div>
                        <div><strong>Fecha:</strong> ${props.fecha_of_v || 'N/A'}</div>
                        <div><strong>Ubigeo:</strong> ${props.ubigeo || 'N/A'}</div>
                      </div>
                    `}
                  />
                </LayersControl.Overlay>

                {/* Capa: Tendencias Económicas */}
                <LayersControl.Overlay name="📊 Tendencias Económicas">
                  <PolygonLayer
                    url="/api/map/layer/tendencias-economicas"
                    style={{
                      color: "#f97316",
                      weight: 2,
                      fillOpacity: 0.25,
                      fillColor: "#f97316",
                    }}
                    popupContent={(props) => `
                      <div class="space-y-2">
                        <h3 class="font-semibold text-orange-800">Tendencias Económicas</h3>
                        <div><strong>Tipo:</strong> ${props.tipo || 'N/A'}</div>
                        <div><strong>Área (has):</strong> ${props.area_has || 'N/A'}</div>
                        <div><strong>Provincia:</strong> ${props.nombprov || 'N/A'}</div>
                        <div><strong>Departamento:</strong> ${props.nombdep || 'N/A'}</div>
                      </div>
                    `}
                  />
                </LayersControl.Overlay>

              </LayersControl>
            </Map>
          </div>
        </div>

        {/* Panel de info flotante (derecha) */}
        <div className="absolute top-4 right-4 bg-white/95 backdrop-blur-sm rounded-xl shadow-xl p-4 max-w-xs border border-gray-200">
          <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
            <Activity className="w-4 h-4 mr-2 text-orange-500" />
            Estado del Mercado
          </h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-gray-600">Propiedades activas:</span>
              <span className="font-medium">{mapStats.totalProperties.toLocaleString()}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Precio m² promedio:</span>
              <span className="font-medium">${(mapStats.avgPrice/100).toFixed(0)}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Tendencia:</span>
              <span className="font-medium text-green-600">↗ +5.2%</span>
            </div>
          </div>
        </div>

        {/* Leyenda (izquierda abajo) */}
        <div className="absolute bottom-4 left-4 bg-white/95 backdrop-blur-sm rounded-xl shadow-xl p-4 border border-gray-200">
          <h4 className="font-semibold text-gray-900 mb-3 text-sm">Leyenda</h4>
          <div className="space-y-2">
            <div className="flex items-center space-x-2 text-xs">
              <div className="w-3 h-3 bg-orange-500 rounded-full border border-white shadow-sm"></div>
              <span className="text-gray-700">Propiedades</span>
            </div>
            <div className="flex items-center space-x-2 text-xs">
              <div className="w-3 h-3 bg-amber-500 rounded-sm border border-white shadow-sm"></div>
              <span className="text-gray-700">Área Urbana</span>
            </div>
            <div className="flex items-center space-x-2 text-xs">
              <div className="w-3 h-3 bg-green-500 rounded-sm border border-white shadow-sm"></div>
              <span className="text-gray-700">Viviendas</span>
            </div>
            <div className="flex items-center space-x-2 text-xs">
              <div className="w-3 h-3 bg-blue-500 rounded-sm border border-white shadow-sm"></div>
              <span className="text-gray-700">Oferta de Vivienda</span>
            </div>
            <div className="flex items-center space-x-2 text-xs">
              <div className="w-3 h-3 bg-orange-600 rounded-sm border border-white shadow-sm"></div>
              <span className="text-gray-700">Tendencias Económicas</span>
            </div>
          </div>
        </div>

        {/* Acciones rápidas */}
        <div className="absolute bottom-4 right-4 flex flex-col space-y-2">
          <button className="bg-orange-500 hover:bg-orange-600 text-white p-3 rounded-xl shadow-lg transition-colors">
            <Calendar className="w-5 h-5" />
          </button>
          <button className="bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-xl shadow-lg transition-colors">
            <BarChart3 className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Estilos Leaflet afinados */}
      <style jsx global>{`
        .leaflet-container {
          border-radius: 0.75rem;
          box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
        }
        .leaflet-control-layers {
          background: rgba(255,255,255,0.95);
          backdrop-filter: blur(10px);
          border-radius: 0.75rem;
          border: 1px solid rgba(229,231,235,0.8);
          box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        }
        .leaflet-popup-content-wrapper {
          border-radius: 0.75rem;
          box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        }
        .district-layer:hover {
          filter: drop-shadow(0 4px 6px rgba(0,0,0,0.1));
        }
      `}</style>
    </div>
  );
}

/* ======================= SidebarContent ======================= */

type SidebarProps = {
  searchTerm: string; setSearchTerm: (v: string) => void;
  selectedDistrict: string; setSelectedDistrict: (v: string) => void;
  priceRange: { min: number | null; max: number | null };
  setPriceRange: (v: { min: number | null; max: number | null }) => void;
  mapStats: { totalProperties: number; avgPrice: number; activeLeads: number; closedDeals: number; avgROI: number; };
  loading: boolean;
  districtsList: Array<{name: string, count: number}>;
  filterOptions: any;
  selectedSource: string; setSelectedSource: (v: string) => void;
  selectedOperationType: string; setSelectedOperationType: (v: string) => void;
  selectedPropertyType: string; setSelectedPropertyType: (v: string) => void;
  colorBy: 'fuente' | 'tipo_operacion' | 'tipo_propiedad';
  setColorBy: (v: 'fuente' | 'tipo_operacion' | 'tipo_propiedad') => void;
};

function SidebarContent({
  searchTerm, setSearchTerm,
  selectedDistrict, setSelectedDistrict,
  priceRange, setPriceRange,
  mapStats,
  loading,
  districtsList,
  filterOptions,
  selectedSource, setSelectedSource,
  selectedOperationType, setSelectedOperationType,
  selectedPropertyType, setSelectedPropertyType,
  colorBy, setColorBy
}: SidebarProps) {

  const districts = [
    "Todos", "Miraflores", "San Isidro", "Barranco", "Surco", "La Molina",
    "San Borja", "Jesús María", "Magdalena", "Pueblo Libre"
  ];

  const serviceTypes = [
    { id: "banks", label: "Bancos", icon: DollarSign, color: "text-blue-500" },
    { id: "hospitals", label: "Hospitales", icon: Activity, color: "text-red-500" },
    { id: "malls", label: "C. Comerciales", icon: Building2, color: "text-green-500" },
    { id: "transport", label: "Transporte", icon: Car, color: "text-purple-500" },
    { id: "security", label: "Comisarías", icon: Shield, color: "text-gray-600" },
  ];

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex-shrink-0 p-6 border-b border-gray-200 bg-gradient-to-r from-orange-50 to-blue-50">
        <div className="flex items-center space-x-2">
          <div className="w-10 h-10 bg-gradient-to-r from-orange-400 to-orange-500 rounded-lg flex items-center justify-center">
            <MapPin className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-bold text-gray-900">
              <a href="http://localhost:3008/" className="text-inherit">SmartCore BI</a>
            </h1>
            <p className="text-xs text-gray-600">Mapa Inteligente</p>
          </div>
        </div>

        {/* Search */}
        <div className="relative mt-4">
          <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
          <input
            type="text"
            placeholder="Buscar propiedades, distritos…"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent bg-white/80 backdrop-blur-sm"
          />
          {searchTerm && (
            <button
              onClick={() => setSearchTerm('')}
              className="absolute right-3 top-3 w-5 h-5 text-gray-400 hover:text-gray-600"
            >
              ✕
            </button>
          )}
        </div>
      </div>

      {/* Stats */}
      <div className="p-6 border-b border-gray-200">
        <h3 className="text-sm font-semibold text-gray-700 mb-4 flex items-center">
          <BarChart3 className="w-4 h-4 mr-2" />
          Dashboard Ejecutivo
        </h3>
        <div className="grid grid-cols-2 gap-3">
          <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl border border-blue-200">
            <div className="text-2xl font-bold text-blue-700">
              {loading ? (
                <div className="animate-pulse bg-blue-300 h-8 w-16 rounded"></div>
              ) : (
                mapStats.totalProperties.toLocaleString()
              )}
            </div>
            <div className="text-xs text-blue-600 font-medium">Propiedades</div>
          </div>
          <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl border border-green-200">
            <div className="text-2xl font-bold text-green-700">
              {loading ? (
                <div className="animate-pulse bg-green-300 h-8 w-20 rounded"></div>
              ) : (
                `$${(mapStats.avgPrice/1000).toFixed(0)}K`
              )}
            </div>
            <div className="text-xs text-green-600 font-medium">Precio Prom.</div>
          </div>
          <div className="bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl border border-orange-200">
            <div className="text-2xl font-bold text-orange-700">
              {loading ? (
                <div className="animate-pulse bg-orange-300 h-8 w-12 rounded"></div>
              ) : (
                mapStats.activeLeads
              )}
            </div>
            <div className="text-xs text-orange-600 font-medium">Leads Activos</div>
          </div>
          <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl border border-purple-200">
            <div className="text-2xl font-bold text-purple-700">
              {loading ? (
                <div className="animate-pulse bg-purple-300 h-8 w-16 rounded"></div>
              ) : (
                `${(mapStats.avgROI / 100000000).toFixed(1)}%`
              )}
            </div>
            <div className="text-xs text-purple-600 font-medium">ROI Promedio</div>
          </div>
        </div>
      </div>

      {/* Filtros */}
      <div className="flex-1 p-6 overflow-y-auto">
        <h3 className="text-lg font-bold text-gray-800 mb-6 flex items-center">
          <Filter className="w-5 h-5 mr-3 text-orange-600" />
          Filtros y Segmentación
        </h3>

        {/* Segmentación Visual - Prioridad Alta */}
        <div className="mb-6 p-4 bg-gradient-to-r from-orange-50 to-amber-50 border border-orange-200 rounded-xl shadow-sm">
          <div className="flex items-center justify-between mb-3">
            <label className="text-sm font-semibold text-orange-800 flex items-center">
              🎨 Colorear Mapa
            </label>
            <div className="w-4 h-4 rounded-full bg-gradient-to-r from-orange-400 to-amber-400 shadow-sm"></div>
          </div>
          <select
            value={colorBy}
            onChange={(e) => setColorBy(e.target.value as 'fuente' | 'tipo_operacion' | 'tipo_propiedad')}
            className="w-full p-3 border border-orange-300 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 bg-white shadow-sm font-medium hover:border-orange-400 transition-colors"
          >
            <option value="fuente">🏢 Por Fuente de Datos</option>
            <option value="tipo_operacion">💰 Por Tipo de Operación</option>
            <option value="tipo_propiedad">🏠 Por Tipo de Propiedad</option>
          </select>
        </div>

        {/* Filtros de Búsqueda Organizados */}
        <div className="space-y-4 mb-6">
          <div className="grid grid-cols-2 gap-3">
            {/* Distrito */}
            <div className="bg-white p-3 rounded-lg border border-gray-200 shadow-sm">
              <label className="block text-xs font-semibold text-gray-700 mb-2 flex items-center">
                <MapPin className="w-3 h-3 mr-1 text-blue-600" />
                Distrito
              </label>
              <select
                value={selectedDistrict}
                onChange={(e) => setSelectedDistrict(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md text-xs focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
              >
                <option value="Todos">Todos</option>
                {districtsList.map(district => (
                  <option key={district.name} value={district.name}>
                    {district.name} ({district.count})
                  </option>
                ))}
              </select>
            </div>

            {/* Fuente */}
            <div className="bg-white p-3 rounded-lg border border-gray-200 shadow-sm">
              <label className="block text-xs font-semibold text-gray-700 mb-2 flex items-center">
                <Building2 className="w-3 h-3 mr-1 text-purple-600" />
                Fuente
              </label>
              <select
                value={selectedSource}
                onChange={(e) => setSelectedSource(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md text-xs focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-white"
              >
                <option value="Todos">Todas</option>
                {filterOptions?.sources?.map((source: any) => (
                  <option key={source.name} value={source.name}>
                    {source.name} ({source.count})
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            {/* Tipo de Operación */}
            <div className="bg-white p-3 rounded-lg border border-gray-200 shadow-sm">
              <label className="block text-xs font-semibold text-gray-700 mb-2 flex items-center">
                <DollarSign className="w-3 h-3 mr-1 text-green-600" />
                Operación
              </label>
              <select
                value={selectedOperationType}
                onChange={(e) => setSelectedOperationType(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md text-xs focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white"
              >
                <option value="Todos">Todas</option>
                {filterOptions?.operationTypes?.map((type: any) => (
                  <option key={type.name} value={type.name}>
                    {type.name} ({type.count})
                  </option>
                ))}
              </select>
            </div>

            {/* Tipo de Propiedad */}
            <div className="bg-white p-3 rounded-lg border border-gray-200 shadow-sm">
              <label className="block text-xs font-semibold text-gray-700 mb-2 flex items-center">
                <Building2 className="w-3 h-3 mr-1 text-amber-600" />
                Tipo
              </label>
              <select
                value={selectedPropertyType}
                onChange={(e) => setSelectedPropertyType(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md text-xs focus:ring-2 focus:ring-amber-500 focus:border-amber-500 bg-white"
              >
                <option value="Todos">Todos</option>
                {filterOptions?.propertyTypes?.map((type: any) => (
                  <option key={type.name} value={type.name}>
                    {type.name} ({type.count})
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Rango de Precios */}
        <div className="mb-6 p-4 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl shadow-sm">
          <label className="block text-sm font-semibold text-green-800 mb-3 flex items-center">
            <DollarSign className="w-4 h-4 mr-2" />
            💰 Rango de Precios
          </label>
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block text-xs text-green-700 mb-1 font-medium">Mínimo</label>
              <input
                type="number"
                placeholder="S/ 0"
                value={priceRange.min || ''}
                onChange={(e) => setPriceRange({ ...priceRange, min: Number(e.target.value) || null })}
                className="w-full p-2 border border-green-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white"
              />
            </div>
            <div>
              <label className="block text-xs text-green-700 mb-1 font-medium">Máximo</label>
              <input
                type="number"
                placeholder="S/ ∞"
                value={priceRange.max || ''}
                onChange={(e) => setPriceRange({ ...priceRange, max: Number(e.target.value) || null })}
                className="w-full p-2 border border-green-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white"
              />
            </div>
          </div>
        </div>

        {/* Botón para limpiar filtros */}
        <div className="mb-6">
          <button
            onClick={() => {
              setSearchTerm('');
              setSelectedDistrict('Todos');
              setPriceRange({ min: null, max: null });
              setSelectedSource('Todos');
              setSelectedOperationType('Todos');
              setSelectedPropertyType('Todos');
            }}
            className="w-full px-4 py-3 text-sm bg-gradient-to-r from-red-50 to-pink-50 hover:from-red-100 hover:to-pink-100 text-red-700 rounded-xl transition-all duration-200 flex items-center justify-center space-x-2 shadow-sm border border-red-200 hover:border-red-300 font-medium"
          >
            <Filter className="w-4 h-4" />
            <span>🧹 Limpiar Todos los Filtros</span>
          </button>
        </div>

        {/* Leyenda de colores dinámica */}
        <div className="mb-4 p-4 bg-gradient-to-r from-indigo-50 to-blue-50 border border-indigo-200 rounded-xl shadow-sm">
          <div className="text-sm font-semibold text-indigo-800 mb-3 flex items-center">
            🎯 Leyenda de Colores ({colorBy.replace('_', ' ')})
          </div>
          <div className="space-y-2 text-xs">
            {colorBy === 'fuente' && (
              <>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-orange-500 shadow-sm border border-orange-600"></div>
                  <span className="font-medium text-gray-700">urbania.pe</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-gray-500 shadow-sm border border-gray-600"></div>
                  <span className="font-medium text-gray-700">Otras fuentes</span>
                </div>
              </>
            )}
            {colorBy === 'tipo_operacion' && (
              <>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-emerald-500 shadow-sm border border-emerald-600"></div>
                  <span className="font-medium text-gray-700">Venta</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-blue-500 shadow-sm border border-blue-600"></div>
                  <span className="font-medium text-gray-700">Alquiler</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-gray-500 shadow-sm border border-gray-600"></div>
                  <span className="font-medium text-gray-700">Otros</span>
                </div>
              </>
            )}
            {colorBy === 'tipo_propiedad' && (
              <>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-violet-500 shadow-sm border border-violet-600"></div>
                  <span className="font-medium text-gray-700">Departamento</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-amber-500 shadow-sm border border-amber-600"></div>
                  <span className="font-medium text-gray-700">Casa</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-cyan-500 shadow-sm border border-cyan-600"></div>
                  <span className="font-medium text-gray-700">Oficina</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-lime-500 shadow-sm border border-lime-600"></div>
                  <span className="font-medium text-gray-700">Terreno</span>
                </div>
                <div className="flex items-center space-x-3 bg-white/50 p-2 rounded-lg">
                  <div className="w-4 h-4 rounded-full bg-gray-500 shadow-sm border border-gray-600"></div>
                  <span className="font-medium text-gray-700">Otros</span>
                </div>
              </>
            )}
          </div>
        </div>

        {/* Estado actual de filtros */}
        {(searchTerm || selectedDistrict !== 'Todos' || priceRange.min || priceRange.max || selectedSource !== 'Todos' || selectedOperationType !== 'Todos' || selectedPropertyType !== 'Todos') && (
          <div className="mb-4 p-3 bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-lg shadow-sm">
            <div className="text-xs font-semibold text-blue-800 mb-2 flex items-center">
              ✅ Filtros Activos:
            </div>
            <div className="space-y-1 text-xs text-blue-700">
              {searchTerm && <div className="bg-white/50 p-1 rounded">• Búsqueda: "{searchTerm}"</div>}
              {selectedDistrict !== 'Todos' && <div className="bg-white/50 p-1 rounded">• Distrito: {selectedDistrict}</div>}
              {selectedSource !== 'Todos' && <div className="bg-white/50 p-1 rounded">• Fuente: {selectedSource}</div>}
              {selectedOperationType !== 'Todos' && <div className="bg-white/50 p-1 rounded">• Operación: {selectedOperationType}</div>}
              {selectedPropertyType !== 'Todos' && <div className="bg-white/50 p-1 rounded">• Tipo: {selectedPropertyType}</div>}
              {(priceRange.min || priceRange.max) && (
                <div className="bg-white/50 p-1 rounded">• Precio: {priceRange.min ? `S/ ${priceRange.min.toLocaleString()}` : 'Min'} - {priceRange.max ? `S/ ${priceRange.max.toLocaleString()}` : 'Max'}</div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function Toggle({
  label,
  value,
  onChange,
}: {
  label: React.ReactNode;
  value: boolean;
  onChange: (v: boolean) => void;
}) {
  return (
    <label className="flex items-center justify-between">
      <span className="text-sm text-gray-700 flex items-center">{label}</span>
      <button
        onClick={() => onChange(!value)}
        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
          value ? 'bg-orange-600' : 'bg-gray-300'
        }`}
      >
        <span
          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
            value ? 'translate-x-6' : 'translate-x-1'
          }`}
        />
      </button>
    </label>
  );
}
